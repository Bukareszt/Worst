// <auto-generated />
using System;
using Backend.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Backend.Persistence.Migrations
{
    [DbContext(typeof(UserDbContext))]
    [Migration("20221203000629_Initial migrations")]
    partial class Initialmigrations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Backend.Persistence.Entities.DirectRelationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("GiverId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("IndirectRelationEntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GiverId");

                    b.HasIndex("IndirectRelationEntityId");

                    b.HasIndex("ReceiverId");

                    b.ToTable("DirectRelations");
                });

            modelBuilder.Entity("Backend.Persistence.Entities.HandshakeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AssociatedUsers")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("GiverId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GiverId");

                    b.ToTable("Handshakes");
                });

            modelBuilder.Entity("Backend.Persistence.Entities.IndirectRelationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("GivenUserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GivenUserId");

                    b.ToTable("IndirectRelations");
                });

            modelBuilder.Entity("Backend.Persistence.Entities.MessageEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ReceiverId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Backend.Persistence.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Backend.Persistence.Entities.DirectRelationEntity", b =>
                {
                    b.HasOne("Backend.Persistence.Entities.UserEntity", "Giver")
                        .WithMany()
                        .HasForeignKey("GiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Persistence.Entities.IndirectRelationEntity", null)
                        .WithMany("AssociatedRelations")
                        .HasForeignKey("IndirectRelationEntityId");

                    b.HasOne("Backend.Persistence.Entities.UserEntity", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Giver");

                    b.Navigation("Receiver");
                });

            modelBuilder.Entity("Backend.Persistence.Entities.HandshakeEntity", b =>
                {
                    b.HasOne("Backend.Persistence.Entities.UserEntity", "Giver")
                        .WithMany()
                        .HasForeignKey("GiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Giver");
                });

            modelBuilder.Entity("Backend.Persistence.Entities.IndirectRelationEntity", b =>
                {
                    b.HasOne("Backend.Persistence.Entities.UserEntity", "GivenUser")
                        .WithMany()
                        .HasForeignKey("GivenUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GivenUser");
                });

            modelBuilder.Entity("Backend.Persistence.Entities.MessageEntity", b =>
                {
                    b.HasOne("Backend.Persistence.Entities.UserEntity", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Persistence.Entities.UserEntity", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("Receiver");
                });

            modelBuilder.Entity("Backend.Persistence.Entities.IndirectRelationEntity", b =>
                {
                    b.Navigation("AssociatedRelations");
                });
#pragma warning restore 612, 618
        }
    }
}
